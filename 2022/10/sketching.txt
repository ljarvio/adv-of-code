after 0th: [1] 
 #noop
after 1st: [1,1] 
 #addx 3 starts
after 2nd: [1,1,1] 
after 3rd: [1,1,1,4] 
 #addx -5 starts
after 4th: [1,1,1,4,4] 
after 5th: [1,1,1,4,4,-1]


At the start of the first cycle, the noop instruction begins execution. During the first cycle, X is 1. After the first cycle, the noop instruction finishes execution, doing nothing.
At the start of the second cycle, the addx 3 instruction begins execution. During the second cycle, X is still 1.
During the third cycle, X is still 1. After the third cycle, the addx 3 instruction finishes execution, setting X to 4.
At the start of the fourth cycle, the addx -5 instruction begins execution. During the fourth cycle, X is still 4.
During the fifth cycle, X is still 4. After the fifth cycle, the addx -5 instruction finishes execution, setting X to -1.

noop
addx 3
addx -5

-------

addx 15
addx -11
addx 6
addx -3
addx 5
addx -1
addx -8
addx 13
addx 4
noop

=====================================================================
part 2:
=====================================================================
- X register sets the horizontal position of the middle of that sprite ###
- if ### overlaps with what position CRT is drawing, "#" is drawn, else "."
00,01,02,...,39     c1,c2,...,40        <- cycles
40,41,42,...,79     41,42,...,79
...
201,202,...,240     202,....,241

--> 
Sprite position: ###.....................................

Start cycle   1: begin executing addx 15
During cycle  1: CRT draws pixel in position 0
Current CRT row: #

During cycle  2: CRT draws pixel in position 1
Current CRT row: ##
End of cycle  2: finish executing addx 15 (Register X is now 16)
Sprite position: ...............###......................

Start cycle   3: begin executing addx -11
During cycle  3: CRT draws pixel in position 2
Current CRT row: ##.
